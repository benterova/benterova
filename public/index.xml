<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ben Terova</title>
        <link>http://localhost:1313/</link>
        <description>Recent content on Ben Terova</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 29 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Deploying ollama on Render.com Private Services</title>
        <link>http://localhost:1313/post/ollama-on-render-com/</link>
        <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/ollama-on-render-com/</guid>
        <description>&lt;img src="http://localhost:1313/post/ollama-on-render-com/render.png" alt="Featured image of post Deploying ollama on Render.com Private Services" /&gt;&lt;h1 id=&#34;deploying-ollama-on-rendercom-private-services&#34;&gt;
    &lt;a href=&#34;#deploying-ollama-on-rendercom-private-services&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Deploying ollama on Render.com Private Services
&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;ve been working on my resume and cover letter optimization application &lt;a class=&#34;link&#34; href=&#34;https://betterjob.app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;betterjob.app&lt;/a&gt;, and I wanted to switch from ChatGPT to a private service running &lt;a class=&#34;link&#34; href=&#34;https://github.com/ollama/ollama&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ollama&lt;/a&gt; to have more control over my models, parameters, and potentially even costs? (I might update this post with information relating to potential cost savings after I&amp;rsquo;ve run some tests. Might end up being more expensive for my use case though.)&lt;/p&gt;
&lt;p&gt;The provided Dockerfile works, however it doesn&amp;rsquo;t come with any models preinstalled. We&amp;rsquo;ll need to modify the Dockerfile of the ollama build process to download llama3 after the container has finished building.&lt;/p&gt;
&lt;h3 id=&#34;ollama-directory&#34;&gt;
    &lt;a href=&#34;#ollama-directory&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    ollama Directory
&lt;/h3&gt;&lt;p&gt;First, I created a new directory in my application&amp;rsquo;s repo root called &amp;ldquo;ollama&amp;rdquo;, which will contain the Dockerfile, entrypoint script, as well as other ollama specific files we&amp;rsquo;ll need, such as a Modelfile to later modify the behavior of our model.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;ollama/Dockerfile&lt;/code&gt; I placed the following I found someplace on Github. I lost it, but if I find it I&amp;rsquo;ll update the link here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Stage 1: Build the binary&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; golang:alpine AS builder&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install required dependencies&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk add --no-cache git build-base cmake bash&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the working directory within the container&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Clone the source code from the GitHub repository&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git clone https://github.com/jmorganca/ollama.git .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Build the binary with static linking&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; go generate ./... &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go build -ldflags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-linkmode external -extldflags &amp;#34;-static&amp;#34;&amp;#39;&lt;/span&gt; -o .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Stage 2: Create the final image&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; alpine&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt; OLLAMA_HOST &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install required runtime dependencies&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk add --no-cache libstdc++ curl&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# NOTE: UNCOMMENT THIS IF YOU&amp;#39;RE CHANGING THE MODELFILE&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# COPY Modelfile /Modelfile&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Copy the custom entry point script into the container&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; entrypoint.sh /entrypoint.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make the script executable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; chmod +x /entrypoint.sh&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a non-root user&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ollama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; GROUP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ollama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; addgroup $GROUP &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser -D -G $GROUP $USER&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Copy the binary from the builder stage&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder /app/ollama /bin/ollama&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; $USER:$GROUP&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/entrypoint.sh&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Afterwards, we&amp;rsquo;ll need to make the file &lt;code&gt;ollama/entrypoint.sh&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./bin/ollama serve &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST http://localhost:11434/api/pull -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;llama3&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tail -f /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Render.com&amp;rsquo;s private services don&amp;rsquo;t have any GPU&amp;rsquo;s to utilize, and this Dockerfile doesn&amp;rsquo;t install any dependencies for being GPU accelerated.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re going to be using a different Modelfile, be sure to uncomment line 26 of &lt;code&gt;ollama/Dockerfile&lt;/code&gt; and make the file &lt;code&gt;ollama/Modelfile&lt;/code&gt; with the &lt;a class=&#34;link&#34; href=&#34;https://github.com/ollama/ollama/blob/main/docs/modelfile.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;desired alterations.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;blueprint-file&#34;&gt;
    &lt;a href=&#34;#blueprint-file&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Blueprint File
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;m using the &lt;a class=&#34;link&#34; href=&#34;https://docs.render.com/blueprint-spec&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Render Blueprint YAML&lt;/a&gt; to define and build my services through code. To create the private service that will be running the ollama Docker image, I added the following to my &lt;code&gt;render.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pserv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;your-app-ollama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;region&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;oregon&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runtime&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;dockerContext&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./ollama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;dockerfilePath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./ollama/Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;plan&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;starter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this setup, Render will pull the ollama image (It appears that Render already has this cached as well, so deployment is very quick), autodetect the port and finalize deploying the image.&lt;/p&gt;
&lt;p&gt;To access the created ollama service in our main application, we can &lt;a class=&#34;link&#34; href=&#34;https://docs.render.com/blueprint-spec#referencing-values-from-other-services&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reference the host from our ollama server&lt;/a&gt; in our main application&amp;rsquo;s environment variables, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;envVars&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;OLLAMA_URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;fromService&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;your-app-ollama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;pserv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;property&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hostport&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The property &lt;code&gt;hostport&lt;/code&gt; will be a string that&amp;rsquo;s the host and the port separated by a colon that you can then reference in your application&amp;rsquo;s code by accessing the environment variables.&lt;/p&gt;
&lt;p&gt;In my Rails application, I added a config option that was the content of the environment variable, or localhost for my development environment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ollama_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetch(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OLLAMA_URL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:11434&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s all! Now I can use &lt;code&gt;Rails.configuration.ollama_url&lt;/code&gt; wherever I need to access the ollama instance.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using the &lt;a class=&#34;link&#34; href=&#34;https://github.com/alexrudall/ruby-openai?tab=readme-ov-file#ollama&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ruby-openai&lt;/a&gt; gem to handle the communication between my Rails application and the ollama instance, and supporting this is also very straightforward as you only have to include this newly created configuration variable when initializing the client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OpenAI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Client&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;uri_base&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configuration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ollama_url&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hope this helped someone implement this setup quickly!&lt;/p&gt;
&lt;p&gt;I like having control of the models I want to run, and this will allow me a lot of flexibility to tailor my parameters to my use case.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;configuring-vscode-devcontainers&#34;&gt;
    &lt;a href=&#34;#configuring-vscode-devcontainers&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Configuring VSCode Devcontainers
&lt;/h2&gt;&lt;p&gt;With the &lt;code&gt;ollama&lt;/code&gt; directory being in the root of our repo, we&amp;rsquo;re able to share the same Dockerfile between our VSCode dev container and Render.com to ensure that we&amp;rsquo;re always running the same as what&amp;rsquo;s running in production.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using the Docker compose container-to-container networking mode, and within &lt;code&gt;.devcontainer/docker-compose.yml&lt;/code&gt; I&amp;rsquo;ve added the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ollama&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;network_mode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;service:app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;context&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;../ollama&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;dockerfile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;ollama_data:/app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this setup you&amp;rsquo;ll have &lt;code&gt;localhost:11434&lt;/code&gt; be the location of the server within your development container, and the Rails specific method mentioned&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Long(ish) Journey.</title>
        <link>http://localhost:1313/post/about/</link>
        <pubDate>Wed, 17 Apr 2024 13:15:59 -0400</pubDate>
        
        <guid>http://localhost:1313/post/about/</guid>
        <description>&lt;h2 id=&#34;welcome&#34;&gt;
    &lt;a href=&#34;#welcome&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Welcome!
&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s nice to have you here. My name is Ben and I&amp;rsquo;ve been building full stack applications for most of my life. I currently mostly focus on Ruby on Rails, though I&amp;rsquo;ve loved working with various platforms and languages throughout my career.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL:DR:&lt;/strong&gt; I learned to write Minecraft server mods, worked at a few unique and interesting companies, fell in love with Ruby on Rails, and ended up building web applications for a living.&lt;/p&gt;
&lt;h4 id=&#34;minecraft-mods--server-management&#34;&gt;
    &lt;a href=&#34;#minecraft-mods--server-management&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Minecraft Mods &amp;amp; Server Management
&lt;/h4&gt;&lt;p&gt;I had started my development journey with Java and Minecraft, creating server-side Bukkit mods to enhance my player&amp;rsquo;s experience and had my first small adventure into the world of running a Minecraft server business when I was 13. With some of my more popular servers averaging around 300 players, with peaks from 1k-2k. I had created multiple server networks offering some of the more traditional server experiences in addition to custom gamemodes developed by me. One of these custom minigames was a FPS class-based shooter within Minecraft, utilizing custom code and Resource Packs to create a multiplayer shooter.&lt;/p&gt;
&lt;p&gt;My cousin and I would run this server from my grandmother&amp;rsquo;s dining room on a fold-out table, with our monitors opposite each other, with him responsible for moderation, player experience, and marketing, while I focused on the technical aspects, networking, server management, development, e-commerce and optimization.&lt;/p&gt;
&lt;p&gt;We used a variety of server hosts based on whatever was the cheapest at the time, and I had a hyperfixation on optimization due to our limited ability to afford the servers at the time, and making 1GB go a long way would mean that would be more time we can spend making the player experience better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Side tangent:&lt;/strong&gt; Through a variety of optimization mods and techniques, I was able to get 150 concurrent players running at a full uninterrupted 20TPS on a shared instance with only 1GB of RAM. It took a while to get it that optimized, but I&amp;rsquo;m still riding that high. I ended up using this set of configurations as the foundation for the server network as it was cheaper and a better experience to link together multiple small 1GB instances via BungeeCord than to split a larger resource&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Through this, I also started to get involved in web development and integrating e-commerce into the server and offering purchasable ranks and items through my web shop, which was eventually enough to allow me to purchase my first computer with my own money. This continued until my interest in Minecraft waned and the server competition had grown outside of the scope of individual developers and into the &amp;ldquo;teams of people&amp;rdquo; territory.&lt;/p&gt;
&lt;h4 id=&#34;my-high-schools-tech-closet&#34;&gt;
    &lt;a href=&#34;#my-high-schools-tech-closet&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    My high school&amp;rsquo;s tech closet.
&lt;/h4&gt;&lt;p&gt;I decided to go to high school at FlexTech in my hometown of Brighton, Michigan as they had a (for the time) technology-friendly and project-based approach to education, and I thought it would be an opportunity to use my existing interests and skills to help me end up where I wanted to be &amp;ndash; writing code for a living.&lt;/p&gt;
&lt;p&gt;During high school, I tried my best to use programming as my means to complete as many of my classes as possible, as the teachers were willing to allow me to use this unorthadox approach to demonstrate my knowledge so long as it remained relevant to the task at hand. As such, I used programming for most of my math classes and wrote small Processing scripts to demonstrate whatever topic we were studying at the time.&lt;/p&gt;
&lt;p&gt;I also used programming as the foundation of a few other of my classes, using application ideas to be the foundation of business plans for civics, writing Processing demos in my programming classes, and I began working with the administration to propose a learning management platform specialized in the unique challenge project based education systems have. I started writing this in pure PHP with no framework, and thankfully it never started getting used because it probably would have been a disaster due to how poorly written it was.&lt;/p&gt;
&lt;p&gt;Around this time, I also started to hang around the IT room and help the IT guy at the time repair broken computers, iPads, or whatever other school property was around and not functioning. I learned a lot about physical device repair, networking and network security.&lt;/p&gt;
&lt;h4 id=&#34;entering-the-workforce&#34;&gt;
    &lt;a href=&#34;#entering-the-workforce&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Entering the workforce.
&lt;/h4&gt;&lt;p&gt;During my junior year, my friend had introduced to me to a friend of his that was looking for someone with web development experience, and this is when I got my first web based development opportunity. I was offered a contractor position for $10/hr at the Orange Cube Group helping with web development as well as helping the owner manage client communication. During this time, I mostly worked with small business to get basic SquareSpace and WordPress websites built, and this is when I started to become more familiar with manipulating the DOM through JS, as there were several projects I&amp;rsquo;ve worked on adding additional functionality to SquareSpace through scripts to meet the clients needs. I had also built a few very small WordPress plugins to augment functionality.&lt;/p&gt;
&lt;p&gt;After graduating, I had become an employee of the Orange Cube Group, and was also working with the same IT guy from my high school doing web development since a company he had helped create had enough clients asking them for web help to hire someone. I worked with them for a few months and made a few websites, though I had gotten an amazing opportunity from the University of Michigan to work as a Desktop Support Specialist II.&lt;/p&gt;
&lt;h4 id=&#34;university-of-michigan&#34;&gt;
    &lt;a href=&#34;#university-of-michigan&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    University of Michigan
&lt;/h4&gt;&lt;p&gt;It wasn&amp;rsquo;t long after I started working at the University of Michigan that I was placed as one the primary supports for the medical research building as I was more familiar with Linux than the other technicians and had an aptitude to quickly resolve the more complex needs of the research division. Compared to their hospital counterpart, the research division tickets were more involved due to data loss concerns, specialized equipment, and heavy use of a slightly modified RHEL built for research use.&lt;/p&gt;
&lt;p&gt;I really had a lot of fun in this position, as I loved sitting in the labs and chatting with the research folks about what kind of work they were doing and asking questions. They obviously loved talking about it and I loved to learn about it. The fun of learning certainly overshadowed the occasional cadaver encounter, smell of the animal research areas, and the elevator doors that never minded closing on your body parts.&lt;/p&gt;
&lt;p&gt;After a few months I recieved another opportunity working with a marketing automation company as their primary web developer, which I accepted as I wanted to primarily focus on programming and development, and there weren&amp;rsquo;t many opportunities for me to build those skills within the hospital setting.&lt;/p&gt;
&lt;h4 id=&#34;the-fun-world-of-marketing-automation&#34;&gt;
    &lt;a href=&#34;#the-fun-world-of-marketing-automation&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The Fun World of Marketing Automation
&lt;/h4&gt;&lt;p&gt;After I had started for Spry Ideas, a publishing house now pivoted to digital marketing, automation, and web design, I started interacting once again with client websites. I was responsible for building new sites, which we often chose WordPress for when there was needed functionality that I would implement via plugins, and I had developed an efficient workflow for our designers and I to be able to iterate very quickly when building client websites. This was also my first introduction to Rails and MVC as well, as we had a few clients with Rails applications that I had needed to make modifications to. I had a lot of fun when working on these Ruby projects that I decided that this was the direction that I wanted to take. Ruby was such a fun language and Rails was a pattern unlike anything I had seen before, and I loved it.&lt;/p&gt;
&lt;p&gt;The team at Spry was amazing, though unfortunately the company closed and split into separate entities, and I was hyper-focused on getting more into the Ruby on Rails space as I could.&lt;/p&gt;
&lt;h4 id=&#34;getting-on-the-rails&#34;&gt;
    &lt;a href=&#34;#getting-on-the-rails&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Getting on the Rails
&lt;/h4&gt;&lt;p&gt;I had applied for a few Ruby on Rails positions locally, and I eventually got an offer from the Cultural Intelligence Center to train with their learning management platform&amp;rsquo;s development contractor Atomic Object, a leading development studio based in Grand Rapids. I spent a week training alongside the developer currently assigned to our project, and during that time I learned as much as I could about the data model as I could, as well as honed a couple of Rails specific understanding so that I could have as seamless a product handoff as possible.&lt;/p&gt;
&lt;p&gt;Unfortunately, this was the very beginning of Covid, so while I was initially planning on being in Grand Rapids for a month training alongside the Atomic Object team, it was decided that everyone would be working from home for indefinite duration. I spent the remainder of the training duration in virtual space with my mentor, while honing my skills and practicing with other features in the roadmap in my free time.&lt;/p&gt;
&lt;p&gt;Afterwards, the contract with Atomic had expired, and I began my journey of maintaining and adding new features to the Cultural Intelligence Center&amp;rsquo;s learning management platform, where I&amp;rsquo;ve been so far (2024). I&amp;rsquo;ve since worked primarily within the Ruby on Rails environment professionally for the last 4 years, with various other side projects either built using Rails or JS.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m excited to see how the journey will continue, and will continue to update this little blog thing as I learn new stuff! Computers Rule!&lt;/p&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>http://localhost:1313/experience/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/experience/</guid>
        <description>&lt;h1 id=&#34;experience&#34;&gt;
    &lt;a href=&#34;#experience&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Experience
&lt;/h1&gt;&lt;p&gt;I have over 7 years of experience building scalable applications within a variety of business contexts, education, SaaS, and more. Here are some of the amazing teams I&amp;rsquo;ve had the privilege to work alongside.&lt;/p&gt;
&lt;h3 id=&#34;cultural-intelligence-center-detroit-mi--senior-software-engineer&#34;&gt;
    &lt;a href=&#34;#cultural-intelligence-center-detroit-mi--senior-software-engineer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Cultural Intelligence Center, Detroit, MI — Senior Software Engineer
&lt;/h3&gt;&lt;p&gt;February 2020 - Present&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Responsibilities:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop and maintain a Ruby on Rails and React learning management platform designed for administering assessments and providing personalized courses and progress tracking.&lt;/li&gt;
&lt;li&gt;Practice TDD to ensure high code quality and maintainability.&lt;/li&gt;
&lt;li&gt;Educate and mentor junior developers on best practices and software design.&lt;/li&gt;
&lt;li&gt;Collaborate with the business development team to add new features and improve user experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; Ruby on Rails, React, PostgreSQL, Docker, S3, Sidekiq, Redis, Bootstrap/TailwindCSS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;red-hat-remote--software-engineer-contractor&#34;&gt;
    &lt;a href=&#34;#red-hat-remote--software-engineer-contractor&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Red Hat, Remote — Software Engineer, Contractor
&lt;/h3&gt;&lt;p&gt;April 2023&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contributions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developed and maintained Kubernetes community website konveyor.io.&lt;/li&gt;
&lt;li&gt;Implemented new features and resolved bugs for the Kubernetes website.&lt;/li&gt;
&lt;li&gt;Collaborated with the Kubernetes community to ensure the website met their needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; Gatsby, React, TailwindCSS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flassh-photobooths-ann-arbor-mi--software-engineer-contractor&#34;&gt;
    &lt;a href=&#34;#flassh-photobooths-ann-arbor-mi--software-engineer-contractor&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Flassh Photobooths, Ann Arbor, MI — Software Engineer, Contractor
&lt;/h3&gt;&lt;p&gt;October 2022 - Present&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contributions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developed a new and modern implementation of their Flassh Connect app in Rust to support an additional 200+ cameras.&lt;/li&gt;
&lt;li&gt;Updated their Rails web platform to latest Rails version and follow modern best practices.&lt;/li&gt;
&lt;li&gt;Add features and fix bugs for their React Electron app.&lt;/li&gt;
&lt;li&gt;Begin orienting existing systems towards a more modern and scalable architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; Tauri, Leptos, Rust, Ruby on Rails, Electron, JavaScript&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spry-ideas-ann-arbor-mi--software-engineer&#34;&gt;
    &lt;a href=&#34;#spry-ideas-ann-arbor-mi--software-engineer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Spry Ideas, Ann Arbor, MI — Software Engineer
&lt;/h3&gt;&lt;p&gt;June 2019 - 2020&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contributions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developed and maintained WordPress installations and custom plugins for marketing automation tools and emails&lt;/li&gt;
&lt;li&gt;Developed responsive tooling for marketing automation and email campaigns to maximize engagement and email client compatibility.&lt;/li&gt;
&lt;li&gt;Built marketing automation funnels and email campaigns for clients using Pardot and SharpSpring.&lt;/li&gt;
&lt;li&gt;Built client websites to spec either using Ruby on Rails or WordPress.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; WordPress, PHP, Ruby on Rails, Twig&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;university-of-michigan-ann-arbor-mi--desktop-support-specialist-ii&#34;&gt;
    &lt;a href=&#34;#university-of-michigan-ann-arbor-mi--desktop-support-specialist-ii&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    University of Michigan, Ann Arbor, MI — Desktop Support Specialist II
&lt;/h3&gt;&lt;p&gt;September 2018 - 2019&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contributions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managed Linux (RHEL) administration and deployment for research divisions.&lt;/li&gt;
&lt;li&gt;Led integration with proprietary software and hardware systems for research divisions, and ensured compliance with HIPAA and other University policies.&lt;/li&gt;
&lt;li&gt;Was the primary point of contact for C-level executives and other high-profile individuals within the hospital and research divisions.&lt;/li&gt;
&lt;li&gt;Managed ticket queue and assignments for the desktop support team.&lt;/li&gt;
&lt;li&gt;Developed and maintained scripts for automating system administration tasks.&lt;/li&gt;
&lt;li&gt;Led a Windows 10 upgrade project across 200+ devices within both hospital and research contexts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; RHEL, Windows 7-10, Research equipment driver and software interfacing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mixer-media-brighton-mi--software-engineer-contractor&#34;&gt;
    &lt;a href=&#34;#mixer-media-brighton-mi--software-engineer-contractor&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Mixer Media, Brighton, MI — Software Engineer, Contractor
&lt;/h3&gt;&lt;p&gt;Jan 2018 - Present&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Contributions&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Developed custom solutions for client websites that needed more advanced third-party integrations than their native platforms could provide.&lt;/li&gt;
&lt;li&gt;On-premises networking installation and consultation on best practices for small businesses.&lt;/li&gt;
&lt;li&gt;Facilitated App Store and Play Store deployments for client&amp;rsquo;s training application&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; HTML/CSS, JavaScript, PHP, SquareSpace, WordPress&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;orange-cube-group-brighton-mi--web-developer&#34;&gt;
    &lt;a href=&#34;#orange-cube-group-brighton-mi--web-developer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Orange Cube Group, Brighton, MI — Web Developer
&lt;/h3&gt;&lt;p&gt;May 2017 - 2018&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Responsibilities&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Maintain communication with clients to understand build requirements and provide updates on progress.&lt;/li&gt;
&lt;li&gt;Develop and maintain client websites and web applications.&lt;/li&gt;
&lt;li&gt;Develop and maintain client email campaigns and basic marketing automation.&lt;/li&gt;
&lt;li&gt;Develop and maintain client social media presence and content.&lt;/li&gt;
&lt;li&gt;On some occasions, provide on-premises support for hardware and networking issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; WordPress, SquareSpace, JavaScript, PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fly-consulting-brighton-mi--web-developer&#34;&gt;
    &lt;a href=&#34;#fly-consulting-brighton-mi--web-developer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Fly Consulting, Brighton, MI — Web Developer
&lt;/h3&gt;&lt;p&gt;July 2017 - 2018&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Responsibilities&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Develop and maintain client websites and web applications.&lt;/li&gt;
&lt;li&gt;Networking installation for new corporate offices, clients such as Benjamin Franklin Plumbing and others.&lt;/li&gt;
&lt;li&gt;Communicate with clients throughout the entire website development process to ensure development is aligned with expectations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech Stack:&lt;/strong&gt; HTML/CSS, JavaScript, SquareSpace, WordPress.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>http://localhost:1313/projects/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/projects/</guid>
        <description>&lt;h1 id=&#34;projects&#34;&gt;
    &lt;a href=&#34;#projects&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Projects
&lt;/h1&gt;&lt;h2 id=&#34;-betterjobapphttpsbetterjobapp&#34;&gt;
    &lt;a href=&#34;#-betterjobapphttpsbetterjobapp&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    💼 &lt;a class=&#34;link&#34; href=&#34;https://betterjob.app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;betterjob.app&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;A opportunity management platform utilizing OpenAI&amp;rsquo;s GPT API to optimize resume content and cover letters for job options.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opportunity job description parsing and keyword extraction&lt;/li&gt;
&lt;li&gt;Accurate resume PDF parsing &amp;amp; autofill&lt;/li&gt;
&lt;li&gt;Automatically selects relevant experience and skills based on the opportunity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rails 7&lt;/li&gt;
&lt;li&gt;Hotwire&lt;/li&gt;
&lt;li&gt;Stimulus&lt;/li&gt;
&lt;li&gt;Devise&lt;/li&gt;
&lt;li&gt;Sidekiq&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Adobe PDFServices&lt;/li&gt;
&lt;li&gt;ChatGPT API&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-adobe-pdf-services-ruby-gemhttpsgithubcombenterovaadobe-pdfservices-ruby&#34;&gt;
    &lt;a href=&#34;#-adobe-pdf-services-ruby-gemhttpsgithubcombenterovaadobe-pdfservices-ruby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    💎 &lt;a class=&#34;link&#34; href=&#34;https://github.com/benterova/adobe-pdfservices-ruby&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adobe PDF Services Ruby Gem&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;A gem I made primarily for the PDF parsing and extraction used by &lt;a class=&#34;link&#34; href=&#34;https://betterjob.app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;betterjob.app&lt;/a&gt;. Forked from another project, I wasn&amp;rsquo;t a fan of heavily repeat logic used and it also didn&amp;rsquo;t support the newer PDF extraction operation. I rebuilt almost all of it using more object-oriented principles and adapted the tests to fit the usage patterns I expected to have.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supports passing a block that will recieve both the operation status and the result that is called as the operation progresses, so applications can react to the status in addition to the result.&lt;/li&gt;
&lt;li&gt;Cleans up uploaded asset to save storage after extraction&lt;/li&gt;
&lt;li&gt;Support for almost all AdobePDFServices operations&lt;/li&gt;
&lt;li&gt;Nice and DRY :)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-flassh-photoboothshttpsflasshco--connect-app-rebuild&#34;&gt;
    &lt;a href=&#34;#-flassh-photoboothshttpsflasshco--connect-app-rebuild&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    📸 &lt;a class=&#34;link&#34; href=&#34;https://flassh.co&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flassh Photobooths&lt;/a&gt; | Connect App Rebuild
&lt;/h2&gt;&lt;p&gt;I migrated their existing Connect application from a C# application with Canon support to a Rust + Tauri powered application leveraging libgphoto2 to support most cameras, in addition to Mac and Linux support for planned integrated devices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Additional support for DSLR&amp;rsquo;s from most makes and most models via libgphoto2&lt;/li&gt;
&lt;li&gt;Built with Tauri, Leptos, and Rust to provide multi-platform support with high performance&lt;/li&gt;
&lt;li&gt;Multiple bug fixes on the original application, including camera disconnect/reconnect support, camera selection, and status indication&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;konveyoriohttpskonveyorio&#34;&gt;
    &lt;a href=&#34;#konveyoriohttpskonveyorio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;a class=&#34;link&#34; href=&#34;https://konveyor.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;konveyor.io&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;Contracted by Red Hat to help them update their community site with updated Kubernetes information, new pages, and relevant Kubecon information prior to Kubecon Amsterdam.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gatsby&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;open-source&#34;&gt;
    &lt;a href=&#34;#open-source&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Open Source
&lt;/h1&gt;&lt;p&gt;As of right now most of my open source work has been bug fixes and more features, although at some point I plan on getting more involved&lt;/p&gt;
&lt;h3 id=&#34;teams-for-linuxhttpsgithubcomismaelmartinezteams-for-linuxpull1082&#34;&gt;
    &lt;a href=&#34;#teams-for-linuxhttpsgithubcomismaelmartinezteams-for-linuxpull1082&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;a class=&#34;link&#34; href=&#34;https://github.com/IsmaelMartinez/teams-for-linux/pull/1082&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;teams-for-linux&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Added a flag to enable the application to follow the system theme, using Electron, IPC, and a connection to the inner Teams app.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ammohttpsgithubcomcyberrumorammopull30&#34;&gt;
    &lt;a href=&#34;#ammohttpsgithubcomcyberrumorammopull30&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;a class=&#34;link&#34; href=&#34;https://github.com/cyberrumor/ammo/pull/30&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AMMO&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Added support for the Steam installation to be automatically detected when installed via Flatpak, and added functionality to ask the user which version they&amp;rsquo;d like to manage.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;city-of-detroit-crime-viewerhttpsgithubcomcityofdetroitcrime-viewerpull80&#34;&gt;
    &lt;a href=&#34;#city-of-detroit-crime-viewerhttpsgithubcomcityofdetroitcrime-viewerpull80&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;a class=&#34;link&#34; href=&#34;https://github.com/CityOfDetroit/crime-viewer/pull/80&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;City of Detroit &lt;code&gt;crime-viewer&lt;/code&gt;&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Fixed a crash that would occur when trying to view an arrest on an Interection where the offense wasn&amp;rsquo;t included in the response. Also adjusted the title and favicon away from &lt;code&gt;create-react-app&lt;/code&gt; default.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
